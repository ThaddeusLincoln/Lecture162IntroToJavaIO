There're several different approaches to JavaI/O. There's also Java nio package introduced 
in Java7.

IO can either be performed using 1) bytes or 2) character data and the methods used are pretty much the same,
it's the actual class what will vary. 

1) binary data involves writing bytes that will not look very meaningful if you open the file
in a normal text editor.  

2) when reading and writing character data, the data is in a readable format and you can open 
the resulting files that have been read or written in a text editor and you can probably make
sense of it. 

Which one to uses, bytes or character data? It really depends on what the data represents, if you're 
creating a report file to be imported  into a spreadsheet you'd probably choose a character string
; and similarly character should probably be the correct type for writing XML or JSON data, but once
storing your program variables or classes it may be more appropriate to use binary format it just 
does depend what you're trying to achieve. 

Another distinction that needs to be made between serial or 1) sequential files and 2) random access files. 

1) sequential access : can be thought of as a stream of data that arrives at your program or is sent out
from it in a defined order with each piece of data following in sequence. 

2) random access : it only applies to files and allows you to jump about the file or within the file
retrieving or overriding any data in any in any location within the file you choose. This is more like
how a data base will program will work, with some sort of index showing you where a particular record
is within the file so that it can be read without having read through thousands of the earlier records
that preceded it.
 
A comparison between sequential data and a stream is made. In fact Java uses various stream objects to deal
with it.

The action to close the FileWriter is very important, and failing to close steams can really cause problems
such as resource leaks and locked files. If an output file is not closed then the data can become corrupted
or the file remain locked, causing that no other process is able to to use it. This need is intended to be 
enforces since Java7.

NOTE : in order to guarantee that FileWriters are closed (even if for instance an exception has rose),
we use the finally block, actually any "cleaning code", i.e, any code that needs to be executed 
not matter what happened before should go inside that block. This code will always be executed unless
the JVM crashes which is very unlikely.

NOTE : a try block must have a catch or finally block at least. It doesn't need to have both but
it must at least have one or the other. Actually in I/O operations is quite common to only have 
try/finally.  

Up until Java7 the code in our Main class (current commit) was pretty much the standard template for writing
data to a stream and reading from streams. But in Java 7 it was introduced an improvement that actually makes
the code quite a bit neater. 

NOTE : there's quite a few ways to break I/O code but in the 3 more popular OS we could set the file to
read only, or in Linux/OSX we could change ownership to root, we can also specify an invalid file path;
attempting to create a file on disk drive doesn't exists in Windows, etc...

NOTE : Java insists that we handle checked Exceptions but there're 2 ways to handle them (doing nothing
wasn't an option):
1) catching them
2) throwing them up back in the call-stack

Obviously when we're in a main method, as it's the entry point of a program we won't have any calling code that
would handle the exception. But the idea of throwing the exception instead of catching it is very useful. Java
documentation uses the term "catch" or "specify" for dealing with checked exceptions. Meaning that the method
must either catch the exception or specify that it throws it. Sometimes it makes more sense to specify (throw).

TIP : throwing exceptions could be a very useful technique to test. The code must be removed the pushed into
production.

NOTE : Java7 implement "try with resources" thought to make every easier with I/O. For instance adding 
a new fileWriter to the current code will imply basically duplicate all the existent code. But try-with-resources
automatically ensures that the file writer streams is closed whether the code executes normally or an exception
occurs is pretty cool. The way exceptions are managed in both cases is different and is something to be looked
at in the documentation. In using try/finally the error will be hidden by the Exception when closing the stream,
whereas this method ensures that first error is the one thrown back and that's highly likely to be the error
that we want to be working with. It's a subtle difference but is something to have into consideration if we're
converting existing code to use try-with-resources. 

The try-with-resources Statement========================================================================

The try-with-resources statement is a try statement that declares one or more resources. 
A resource is an object that must be closed after the program is finished with it. 
The try-with-resources statement ensures that each resource is closed at the end of the statement. 
Any object that implements java.lang.AutoCloseable, which includes all objects which 
implement java.io.Closeable, can be used as a resource.

The following example reads the first line from a file. It uses an instance of BufferedReader 
to read data from the file. BufferedReader is a resource that must be closed after 
the program is finished with it:

static String readFirstLineFromFile(String path) throws IOException {
    try (BufferedReader br =
                   new BufferedReader(new FileReader(path))) {
        return br.readLine();
    }
}

Prior to Java SE 7, you can use a finally block to ensure that a resource is closed regardless 
of whether the try statement completes normally or abruptly. 

NOTE : we could add a finally block to try-with-resources if that's what we wanted to do. 
But don't try to close the resources in it, because that's unnecessary and closing some 
resources when they are open can cause and error, so it's better to leave it to the try 
resources block to do for you automatically.

NOTE : try-with-resource allows more than one resource to be specified. 

NOTE: we Scanner's object close() method is called, it also closes any stream that it was using, 
although is probably more accurate to use the term, "readable" instead of stream, 
always that the steam object implements the closable interface. FileReader for instance, 
implements Closable.

BUFFEREDREADER ================================================

A BufferReader reads text from the input stream and buffers the characters into a character array. 
We can use a FileReader and use it as InputStream for the BufferedReader to use. 

NOTE : reading chunk of data from a stream such as file is more efficient than reading 
just a few characters at a time and the reason for that is that things like the overhead 
of seeking to the correct track and sector on your disk drive are are significant. 
So it takes a while to find the correct place on the disk drive to read from and if you have 
to do that many times because only a few bytes have been read at a time then the seek times 
for this really do adds up. Consequently BufferedReaders can be a lot more faster.

We can specify the size of the Buffer but the default is 8K Bytes, which is enough for most purposes. 
While what we want to read is inferior to the buffer size it will be possible to read 
it in a single time.

Most of the terminals in the mid 70s (Colossal Cave Adventure is from 1976) they couldn't 
display lower-case characters.

When we have code in our main() method we can just specify that the method throws the 
Exception and remove the catch block, now that approach can't be taken with a static 
initialization block, and the reason is that the static initialization block 
they're actually executed when the classes are loaded so, in other words there is no way 
for any of that code to catch any exception that are thrown.

We can throw uncheck exceptions in a initialization block, but not checked ones. 
Unchecked exceptions don't have to be caught but checked exceptions must be. 

BufferedWriter : the concept is the same as for BufferedReader, the FilerWriter 
puts the data into the buffered and the data is only written to the disk when the buffer is full. 
Once again this prevents from writing small amounts of data to the disk which is very efficient, 
because the disk drive is generally speaking much slower that the computer processor. 
So our applications are going to be slow down waiting for that disk drive to write data. 
In summary using BufferedWritter the data is written in size-able chunks rather than sort 
of a character at a time which is faster. 

Bytes Streams or Binary Data =============================================================

One advantage of using binaryData or byteStream is that we don't have to pass the data into the various
data types that were stored and the reason for that is that  a byteStream itself can be used to
read and write any of the Java primitive data types such as double, int, byte, etc. Also it can handle 
String variables, this is a special cause Strings are not a primitive data type, which is pretty cool.

Working with ByteStreams follow the same patterns, the difference lays in that we're going to use
FileInputStream and FileOutputStream classes instead of file readers/writers.

We're going to continue buffering the data with BufferenInputStream and BufferedOutputStream class. Although, 
we could work directly with the byteStreams, we have to consider that they only handle bytes, which would be
either writing either a single byte or a specified number of bytes. There are occasions when that's probably
all you'll need but generally speaking when storing and retrieving data you probably want to work with Java types.

The Java I/O package gladly for us makes it easy by providing the DataInputStream and DataOutputStream classes
and they provide methods such as readInt() which reads an integer from the stream, it does this by reading 4
bytes from the stream and building up the integer from those 4 bytes.   

When writing with a ByteStream we'll often use the extension *.dat, because it will no longer be a text file,
and is also important to make clear that this isn't a regular text file. So we wouldn't want to call it *.txt,
which would make people believe that they can open it with a textEditor when what is really contained inside
is binary data.

The DataInputStream does itself the parsing of int or Strings we don't have to worry about that, the 
DataInputStream takes care of build primitive types such as int and double from the bytes on the file. 

EOF Exception : is thrown by the DataStreamReaders throw an IO Exception when there's no more data
to be read form the stream. EOF Exception is a subclass of Exception. And we really should be checking 
for that as a way to terminate the while loop rather than using the IOException. So a good way of doing it
would be putting this code inside a try catch block.

boolean eof = false;
while(!eof){
try{

}catch(EOFException){....}

} 
 
Working with ByteStreams is no more complicated than reading and writing character streams, but we do
have to know the format of the data that we're reading. In our example, as we wrote the original file we knew
when to use readInt or readUTF (by using those in the same order as we used they opposites in the write methods).
So provided that we know the format of the data reading from ByteStream is straightforward. Something similar 
happens with a text file, but at least we can open it and see the format of the data. 

 